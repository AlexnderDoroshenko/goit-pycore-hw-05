"""
–ó–∞–º–∏–∫–∞–Ω–Ω—è –≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—ñ - —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–º—ñ–Ω–Ω—ñ –∑—ñ —Å–≤–æ–≥–æ –ª–µ–∫—Å–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, —Ç–æ–±—Ç–æ –∑ –æ–±–ª–∞—Å—Ç—ñ, –¥–µ –≤–æ–Ω–∞ –±—É–ª–∞ –æ–≥–æ–ª–æ—à–µ–Ω–∞.

–†–µ–∞–ª—ñ–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é caching_fibonacci, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–∂–µ –æ–±—á–∏—Å–ª–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ.



–†—è–¥ –§—ñ–±–æ–Ω–∞—á—á—ñ - —Ü–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —á–∏—Å–µ–ª –≤–∏–¥—É: 0, 1, 1, 2, 3, 5, 8, ..., –¥–µ –∫–æ–∂–Ω–µ –Ω–∞—Å—Ç—É–ø–Ω–µ —á–∏—Å–ª–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –≤–∏—Ö–æ–¥–∏—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –¥–≤–æ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —á–ª–µ–Ω—ñ–≤ —Ä—è–¥—É.

–£ –∑–∞–≥–∞–ª—å–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è n-–≥–æ —á–ª–µ–Ω–∞ —Ä—è–¥—É –§—ñ–±–æ–Ω–∞—á—á—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏—Ä–∞–∑: 
ùêπ
ùëõ
=
ùêπ
ùëõ
‚àí
1
+
ùêπ
ùëõ
‚àí
2
F 
n
‚Äã
 =F 
n‚àí1
‚Äã
 +F 
n‚àí2
‚Äã
 .

–¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–∏—Ä—ñ—à–∏—Ç–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –æ–±—á–∏—Å–ª—é—î —á–∏—Å–ª–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ—Ç–∏, –¥–æ–∫–∏ –≤–∏–∫–ª–∏–∫ –Ω–µ —Å—è–≥–Ω–µ —á–ª–µ–Ω—ñ–≤ —Ä—è–¥—É –º–µ–Ω—à–µ n = 1, –¥–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–¥–∞–Ω–∞.



–í–∏–º–æ–≥–∏ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:

–§—É–Ω–∫—Ü—ñ—è caching_fibonacci() –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é fibonacci(n).
fibonacci(n) –æ–±—á–∏—Å–ª—é—î n-—Ç–µ —á–∏—Å–ª–æ –§—ñ–±–æ–Ω–∞—á—á—ñ. –Ø–∫—â–æ —á–∏—Å–ª–æ –≤–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –∫–µ—à—ñ, —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–µ—à—É.
–Ø–∫—â–æ —á–∏—Å–ª–æ –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –∫–µ—à—ñ, —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –æ–±—á–∏—Å–ª–∏—Ç–∏ –π–æ–≥–æ, –∑–±–µ—Ä–µ–≥—Ç–∏ —É –∫–µ—à —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ.


–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:

–í —è–∫–æ—Å—Ç—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –º–∏ –Ω–∞–¥–∞–º–æ –ø—Å–µ–≤–¥–æ –∫–æ–¥ –∑–∞–≤–¥–∞–Ω–Ω—è.

‚òù –ü—Å–µ–≤–¥–æ–∫–æ–¥ - —Ü–µ —Å–ø–æ—Å—ñ–± –∑–∞–ø–∏—Å—É –∞–ª–≥–æ—Ä–∏—Ç–º—É –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∫–æ–¥—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–ø–∏—Å—É —ñ–¥–µ—ó –∞–±–æ –ø—Ä–æ—Ü–µ—Å—É —É –≤–∏–≥–ª—è–¥—ñ, –∑—Ä–æ–∑—É–º—ñ–ª–æ–º—É –¥–ª—è –ª—é–¥–µ–π. –í—ñ–Ω –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä—ñ, –∞–ª–µ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º —á—ñ—Ç–∫–æ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–∞ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏, —è–∫ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∞ —á–∏ –∞–ª–≥–æ—Ä–∏—Ç–º. –ì–æ–ª–æ–≤–Ω–∞ –π–æ–≥–æ –º–µ—Ç–∞ - –ø–µ—Ä–µ–¥–∞—Ç–∏ —ñ–¥–µ—é –∞–ª–≥–æ—Ä–∏—Ç–º—É —á—ñ—Ç–∫–æ —Ç–∞ –ø—Ä–æ—Å—Ç–æ.


–û—Å—å –ø—Å–µ–≤–¥–æ–∫–æ–¥ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó caching_fibonacci, —è–∫–∞ –æ–±—á–∏—Å–ª—é—î —á–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–µ—à—É–≤–∞–Ω–Ω—è:

–§–£–ù–ö–¶–Ü–Ø caching_fibonacci
    –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫ cache

    –§–£–ù–ö–¶–Ü–Ø fibonacci(n)
        –Ø–∫—â–æ n <= 0, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 0
        –Ø–∫—â–æ n == 1, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 1
        –Ø–∫—â–æ n —É cache, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ cache[n]

        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ cache[n]

    –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é fibonacci
–ö–Ü–ù–ï–¶–¨ –§–£–ù–ö–¶–Ü–á caching_fibonacci



–§—É–Ω–∫—Ü—ñ—è caching_fibonacci —Å—Ç–≤–æ—Ä—é—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é fibonacci —ñ —Å–ª–æ–≤–Ω–∏–∫ cache –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ. –ö–æ–∂–µ–Ω —Ä–∞–∑, –∫–æ–ª–∏ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è fibonacci(n), —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è, —á–∏ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è n —É cache. –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è —î —É –∫–µ—à—ñ, –≤–æ–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–µ–≥–∞–π–Ω–æ, —â–æ –∑–Ω–∞—á–Ω–æ –∑–º–µ–Ω—à—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤. –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î —É –∫–µ—à—ñ, –≤–æ–Ω–æ –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É cache. –§—É–Ω–∫—Ü—ñ—è caching_fibonacci –ø–æ–≤–µ—Ä—Ç–∞—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é fibonacci, —è–∫–∞ —Ç–µ–ø–µ—Ä –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–µ—à—É–≤–∞–Ω–Ω—è.



–ö—Ä–∏—Ç–µ—Ä—ñ—ó –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:

–ö–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ—ó fibonacci(n) –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à—É.
–ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó —Ç–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–±—á–∏—Å–ª–µ–Ω—å.
–ß–∏—Å—Ç–æ—Ç–∞ –∫–æ–¥—É, –≤–∫–ª—é—á–∞—é—á–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.


–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

# –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é fibonacci
fib = caching_fibonacci()

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é fibonacci –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ
print(fib(10))  # –í–∏–≤–µ–¥–µ 55
print(fib(15))  # –í–∏–≤–µ–¥–µ 610
"""

def caching_fibonacci() -> int:
    """
    The caching_fibonacci function inverts the internal fibonacci function so
    that it can now be used to calculate Fibonacci numbers using caching methods.

    Returns:
        int: Fibonacci number
    """
    # create empty cache dictionary
    cache = {}
    
    def fibonacci(n: int) -> int:
        """
        Function calculates the nth Fibonacci numbers. 
        If the number is already in the cache, 
        the function can rotate the value from the cache.

        Args:
            n (int): Fibonacci number
            
        Returns:
            int: Fibonacci number
        """
        # case n = 0 
        if n <= 0:
            return 0
        # case n = 1
        elif n == 1:
            return 1
        # case n already in cache
        elif n in cache:
            return cache[n]
        # case not in cache
        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return cache[n]
    
    return fibonacci

# Test function with test cases
def test_caching_fibonacci():
    # getting fibonaccs funtion 
    c_f = caching_fibonacci()
    # Test case 1: n = 0
    assert 0 == c_f(0), f"The test is failed for n = 0, result is '{c_f(0)}'"
    # Test case 2: n = 1
    assert 1 == c_f(1), f"The test is failed for n = 1, result is '{c_f(1)}'"
    # Test case 3: n = 10
    assert 55 == c_f(10), \
        f"The test is failed for n = 10, result '{c_f(10)}' not equal to 55"
    # Test case 4: n = 15
    assert 610 == c_f(15), \
        f"The test is failed for n = 15, result '{c_f(15)}' not equal to 610"
    print("All test cases passed successfully")

# Uncomment the line below to run the test function
# test_caching_fibonacci()
